[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "opencontrol"
version = "1.0.0"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
description = "Advanced Multi-Modal World Model Platform for Embodied AI"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research", 
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Robotics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "machine learning",
    "deep learning",
    "robotics", 
    "world model",
    "transformer",
    "multi-modal",
    "model predictive control",
    "embodied ai",
    "pytorch"
]
dependencies = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "torchaudio>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "timm>=0.9.0",
    "transformers>=4.35.0",
    "einops>=0.7.0",
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "textual>=0.45.0",
    "typer>=0.9.0",
    "pyyaml>=6.0",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
    "pydantic>=2.4.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pandas>=2.1.0",
    "h5py>=3.9.0",
    "zarr>=2.16.0",
    "datasets>=2.14.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "tensorboard>=2.15.0",
    "wandb>=0.16.0",
    "scikit-learn>=1.3.0",
    "scikit-image>=0.21.0",
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=23.2.0",
    "aiohttp>=3.8.0",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
    "GPUtil>=1.4.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0", 
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
monitoring = [
    "wandb>=0.16.0",
    "tensorboard>=2.15.0",
]
visualization = [
    "plotly>=5.17.0",
]
robotics = [
    # Robot communication and control
    "pyserial>=3.5",
    "pymodbus>=3.5.0",
    "paho-mqtt>=1.6.0",
    
    # ROS/ROS2 integration (optional)
    "roslibpy>=1.5.0",
    
    # Robot-specific drivers
    "ur-rtde>=1.5.0",  # Universal Robots
    "pyfranka>=0.8.0",  # Franka Emika (if available)
    
    # Computer vision for robotics
    "opencv-contrib-python>=4.8.0",
    "realsense2-python>=2.54.0",
    
    # Sensor processing
    "pyrealsense2>=2.54.0",
    "pyzmq>=25.0.0",
    
    # Motion planning
    "moveit-core>=2.5.0",  # if available
    "robotics-toolbox-python>=1.1.0",
    "spatialmath-python>=1.1.0",
    
    # Safety and constraints
    "casadi>=3.6.0",  # For optimization
    "control>=0.9.0",  # Control systems
]

[project.scripts]
opencontrol = "opencontrol.cli.main:cli"

[project.urls]
Homepage = "https://github.com/llamasearchai/OpenControl"
Documentation = "https://opencontrol.readthedocs.io/"
Repository = "https://github.com/llamasearchai/OpenControl"
"Bug Tracker" = "https://github.com/llamasearchai/OpenControl/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["opencontrol*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
opencontrol = ["configs/**/*.yaml", "configs/**/*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["opencontrol"]
known_third_party = ["torch", "numpy", "click", "rich"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "timm.*",
    "transformers.*",
    "wandb.*",
    "tensorboard.*",
    "plotly.*",
    "cv2.*",
    "GPUtil.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=opencontrol",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
]

# Coverage configuration
[tool.coverage.run]
source = ["opencontrol"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["opencontrol"] 